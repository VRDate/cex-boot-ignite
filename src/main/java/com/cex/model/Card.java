/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.cex.model;

import java.io.*;

import net.sf.oval.constraint.Length;
import net.sf.oval.constraint.Min;
import net.sf.oval.constraint.NotEmpty;
import net.sf.oval.constraint.NotNull;
import net.sf.oval.constraint.Range;

/**
 * Card definition.
 *
 * Code generated by Apache Ignite Schema Import utility: 04/01/2016.
 */
public class Card implements Serializable {
    /** */
    private static final long serialVersionUID = 0L;

    /** Value for cardNo. */
    @NotNull
    @NotEmpty
    @Length(max = 30)
    private String cardNo;

    /** Value for cardUpc. */
    @NotNull
    @NotEmpty
    @Length(max = 15)
    private String cardUpc;

    /** Value for faceValue. */
    @Range (min=0, max=1000)
    private Double faceValue;

    /** Value for maxFaceValue. */
    @Range (min=0, max=1000)
    private Double maxFaceValue;

    /** Value for cardType. */
    private String cardType;

    /** Value for cardStatus. */
    private String cardStatus;

    /** Value for createTime. */
    private java.sql.Timestamp createTime;

    /** Value for lastUpdateTime. */
    private java.sql.Timestamp lastUpdateTime;

    /** Value for assigneddp. */
    @Min(100)
    private Integer assigneddp;

    /** Value for assignedstore. */
    @Min(100)
    private Integer assignedstore;

    /** Value for remark. */
    private String remark;

    /**
     * Empty constructor.
     */
    public Card() {
        // No-op.
    }

    /**
     * Full constructor.
     */
    public Card(
        String cardNo,
        String cardUpc,
        Double faceValue,
        Double maxFaceValue,
        String cardType,
        String cardStatus,
        java.sql.Timestamp createTime,
        java.sql.Timestamp lastUpdateTime,
        Integer assigneddp,
        Integer assignedstore,
        String remark
    ) {
        this.cardNo = cardNo;
        this.cardUpc = cardUpc;
        this.faceValue = faceValue;
        this.maxFaceValue = maxFaceValue;
        this.cardType = cardType;
        this.cardStatus = cardStatus;
        this.createTime = createTime;
        this.lastUpdateTime = lastUpdateTime;
        this.assigneddp = assigneddp;
        this.assignedstore = assignedstore;
        this.remark = remark;
    }

    /**
     * Gets cardNo.
     *
     * @return Value for cardNo.
     */
    public String getCardNo() {
        return cardNo;
    }

    /**
     * Sets cardNo.
     *
     * @param cardNo New value for cardNo.
     */
    public void setCardNo(String cardNo) {
        this.cardNo = cardNo;
    }

    /**
     * Gets cardUpc.
     *
     * @return Value for cardUpc.
     */
    public String getCardUpc() {
        return cardUpc;
    }

    /**
     * Sets cardUpc.
     *
     * @param cardUpc New value for cardUpc.
     */
    public void setCardUpc(String cardUpc) {
        this.cardUpc = cardUpc;
    }

    /**
     * Gets faceValue.
     *
     * @return Value for faceValue.
     */
    public Double getFaceValue() {
        return faceValue;
    }

    /**
     * Sets faceValue.
     *
     * @param faceValue New value for faceValue.
     */
    public void setFaceValue(Double faceValue) {
        this.faceValue = faceValue;
    }

    /**
     * Gets maxFaceValue.
     *
     * @return Value for maxFaceValue.
     */
    public Double getMaxFaceValue() {
        return maxFaceValue;
    }

    /**
     * Sets maxFaceValue.
     *
     * @param maxFaceValue New value for maxFaceValue.
     */
    public void setMaxFaceValue(Double maxFaceValue) {
        this.maxFaceValue = maxFaceValue;
    }

    /**
     * Gets cardType.
     *
     * @return Value for cardType.
     */
    public String getCardType() {
        return cardType;
    }

    /**
     * Sets cardType.
     *
     * @param cardType New value for cardType.
     */
    public void setCardType(String cardType) {
        this.cardType = cardType;
    }

    /**
     * Gets cardStatus.
     *
     * @return Value for cardStatus.
     */
    public String getCardStatus() {
        return cardStatus;
    }

    /**
     * Sets cardStatus.
     *
     * @param cardStatus New value for cardStatus.
     */
    public void setCardStatus(String cardStatus) {
        this.cardStatus = cardStatus;
    }

    /**
     * Gets createTime.
     *
     * @return Value for createTime.
     */
    public java.sql.Timestamp getCreateTime() {
        return createTime;
    }

    /**
     * Sets createTime.
     *
     * @param createTime New value for createTime.
     */
    public void setCreateTime(java.sql.Timestamp createTime) {
        this.createTime = createTime;
    }

    /**
     * Gets lastUpdateTime.
     *
     * @return Value for lastUpdateTime.
     */
    public java.sql.Timestamp getLastUpdateTime() {
        return lastUpdateTime;
    }

    /**
     * Sets lastUpdateTime.
     *
     * @param lastUpdateTime New value for lastUpdateTime.
     */
    public void setLastUpdateTime(java.sql.Timestamp lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
    }

    /**
     * Gets assigneddp.
     *
     * @return Value for assigneddp.
     */
    public Integer getAssigneddp() {
        return assigneddp;
    }

    /**
     * Sets assigneddp.
     *
     * @param assigneddp New value for assigneddp.
     */
    public void setAssigneddp(Integer assigneddp) {
        this.assigneddp = assigneddp;
    }

    /**
     * Gets assignedstore.
     *
     * @return Value for assignedstore.
     */
    public Integer getAssignedstore() {
        return assignedstore;
    }

    /**
     * Sets assignedstore.
     *
     * @param assignedstore New value for assignedstore.
     */
    public void setAssignedstore(Integer assignedstore) {
        this.assignedstore = assignedstore;
    }

    /**
     * Gets remark.
     *
     * @return Value for remark.
     */
    public String getRemark() {
        return remark;
    }

    /**
     * Sets remark.
     *
     * @param remark New value for remark.
     */
    public void setRemark(String remark) {
        this.remark = remark;
    }

    /** {@inheritDoc} */
    @Override public boolean equals(Object o) {
        if (this == o)
            return true;

        if (!(o instanceof Card))
            return false;

        Card that = (Card)o;

        if (cardNo != null ? !cardNo.equals(that.cardNo) : that.cardNo != null)
            return false;

        if (cardUpc != null ? !cardUpc.equals(that.cardUpc) : that.cardUpc != null)
            return false;

        if (faceValue != null ? !faceValue.equals(that.faceValue) : that.faceValue != null)
            return false;

        if (maxFaceValue != null ? !maxFaceValue.equals(that.maxFaceValue) : that.maxFaceValue != null)
            return false;

        if (cardType != null ? !cardType.equals(that.cardType) : that.cardType != null)
            return false;

        if (cardStatus != null ? !cardStatus.equals(that.cardStatus) : that.cardStatus != null)
            return false;

        if (createTime != null ? !createTime.equals(that.createTime) : that.createTime != null)
            return false;

        if (lastUpdateTime != null ? !lastUpdateTime.equals(that.lastUpdateTime) : that.lastUpdateTime != null)
            return false;

        if (assigneddp != null ? !assigneddp.equals(that.assigneddp) : that.assigneddp != null)
            return false;

        if (assignedstore != null ? !assignedstore.equals(that.assignedstore) : that.assignedstore != null)
            return false;

        if (remark != null ? !remark.equals(that.remark) : that.remark != null)
            return false;

        return true;
    }

    /** {@inheritDoc} */
    @Override public int hashCode() {
        int res = cardNo != null ? cardNo.hashCode() : 0;

        res = 31 * res + (cardUpc != null ? cardUpc.hashCode() : 0);

        res = 31 * res + (faceValue != null ? faceValue.hashCode() : 0);

        res = 31 * res + (maxFaceValue != null ? maxFaceValue.hashCode() : 0);

        res = 31 * res + (cardType != null ? cardType.hashCode() : 0);

        res = 31 * res + (cardStatus != null ? cardStatus.hashCode() : 0);

        res = 31 * res + (createTime != null ? createTime.hashCode() : 0);

        res = 31 * res + (lastUpdateTime != null ? lastUpdateTime.hashCode() : 0);

        res = 31 * res + (assigneddp != null ? assigneddp.hashCode() : 0);

        res = 31 * res + (assignedstore != null ? assignedstore.hashCode() : 0);

        res = 31 * res + (remark != null ? remark.hashCode() : 0);

        return res;
    }

    /** {@inheritDoc} */
    @Override public String toString() {
        return "Card [cardNo=" + cardNo +
            ", cardUpc=" + cardUpc +
            ", faceValue=" + faceValue +
            ", maxFaceValue=" + maxFaceValue +
            ", cardType=" + cardType +
            ", cardStatus=" + cardStatus +
            ", createTime=" + createTime +
            ", lastUpdateTime=" + lastUpdateTime +
            ", assigneddp=" + assigneddp +
            ", assignedstore=" + assignedstore +
            ", remark=" + remark +
            "]";
    }
}

